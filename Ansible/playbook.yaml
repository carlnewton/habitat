- name: Habitat Server Provisioning
  hosts: all
  vars_files:
    - vars.yaml
  tasks:
    - name: Update dnf package index
      dnf:
        update_cache: yes

    - name: Install development tools and PHP packages
      dnf:
        name:
          - gcc
          - make
          - php-devel
          - php-pear
        state: present
      become: yes

    - name: Update PECL channel
      command: pecl channel-update pecl.php.net

    - name: Set PHP ini path for PEAR
      command: pear config-set php_ini /etc/php.ini

    - name: Install httpd
      dnf:
        name: httpd
        state: present
      become: yes

    - name: Install supporting packages
      dnf:
        name:
          - libicu-devel
          - libzip-devel
          - zip
          - libjpeg-devel
          - libpng-devel
          - freetype-devel
          - git
          - mod_ssl
          - nodejs
          - npm
        state: present
      become: yes

    - name: Install Crontab
      dnf:
        name:
          - cronie
        state: present
      become: yes
      tags:
      - cron

    - name: Install PHP 8.3 and required extensions
      dnf:
        name:
          - php8.3
          - php8.3-cli
          - php8.3-mysqlnd
          - php8.3-xml
          - php8.3-mbstring
          - php8.3-intl
          - php8.3-opcache
          - php8.3-zip
          - php8.3-gd
        state: present
      become: yes

    - name: Copy INI files to php conf.d directory
      copy:
        src: "{{ item }}"
        dest: /etc/php.d/
        owner: root
        group: root
        mode: '0644'
      with_fileglob:
        - var/*.ini

    - name: Create virtual host configuration for HTTP
      ansible.builtin.template:
        src: httpd-vhost.conf.j2
        dest: /etc/httpd/conf.d/{{ domain }}.conf
      become: yes

    - name: Update the DocumentRoot in httpd.conf
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^DocumentRoot'
        line: 'DocumentRoot "/var/www/html/current/public"'
        state: present
      become: yes

    - name: Ensure the new document root directory exists
      file:
        path: /var/www/html/current/public
        state: directory
        owner: apache
        group: apache
        mode: '0775'
      become: yes

    - name: Ensure the file uploads directory exists
      file:
        path: /var/www/uploads
        state: directory
        owner: apache
        group: apache
        mode: '0775'
      become: yes

    - name: Install Certbot
      dnf:
        name:
          - certbot
          - python3-certbot-apache
        state: present
      become: yes

    - name: Obtain Let's Encrypt certificate
      ansible.builtin.command:
        cmd: certbot --apache --non-interactive --agree-tos --email {{ email }} -d {{ domain }}
      register: certbot_result
      changed_when: certbot_result.rc == 0
      become: yes

    - name: Create or update the rewrite configuration
      ansible.builtin.lineinfile:
        path: /etc/httpd/conf.d/rewrite.conf
        line: |
          RewriteEngine On
          RewriteCond %{HTTPS} off
          RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
        state: present
        create: yes
      become: yes

    - name: Start and enable httpd service
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: yes

    - name: Start and enable crontab service
      ansible.builtin.service:
        name: crond
        state: started
        enabled: yes
      become: yes
      tags:
      - cron

    - name: Open port 443 in the firewall
      ansible.builtin.command:
        cmd: iptables -A INPUT -p tcp --dport 443 -j ACCEPT
      ignore_errors: yes

    - name: Open port 80 in the firewall
      ansible.builtin.command:
        cmd: iptables -A INPUT -p tcp --dport 80 -j ACCEPT
      ignore_errors: yes

    - name: Save iptables rules
      ansible.builtin.command:
        cmd: service iptables save
      ignore_errors: yes

    - name: Install PIP
      dnf:
        name: python3-pip
        state: present
      become: yes
      tags:
      - mariadb

    - name: Install PyMySQL
      pip:
        name: PyMySQL
        state: present
      become: yes
      tags:
      - mariadb

    - name: Install mariadb
      dnf:
        name:
          - mariadb105
          - mariadb105-server
        state: present
      become: yes
      tags:
      - mariadb

    - name: Start and enable MariaDB service
      service:
        name: mariadb
        state: started
        enabled: yes
      tags:
      - mariadb

    - name: Generate a random database password
      set_fact:
        random_password: "{{ lookup('community.general.random_string', length=16, min_lower=1, min_upper=1, min_numeric=1, min_special=1, override_special='-_=+!()[]') }}"
      tags:
      - mariadb

    - name: Create database
      mysql_db:
        name: "habitat"
        login_unix_socket: /var/lib/mysql/mysql.sock
        state: present
      become: yes
      tags:
      - mariadb

    - name: Create database user
      mysql_user:
        name: "habitat"
        password: "{{ random_password }}"
        login_unix_socket: /var/lib/mysql/mysql.sock
        state: present
      become: yes
      tags:
      - mariadb

    - name: Grant privileges to the user
      mysql_user:
        name: "habitat"
        priv: "habitat.*:ALL"
        login_unix_socket: /var/lib/mysql/mysql.sock
        state: present
      become: yes
      tags:
      - mariadb

    - name: Check if .env.local file exists
      stat:
        path: "{{ shared_path }}/.env.local"
      register: env_file
      tags:
      - variables

    - name: Create shared directory
      file:
        path: "{{ shared_path }}"
        owner: apache
        group: apache
        mode: '0775'
        state: directory
      become: yes
      when: not env_file.stat.exists
      tags:
      - variables

    - name: Create .env.local file if it does not exist
      copy:
        dest: "{{ shared_path }}/.env.local"
        content: ""
        owner: apache
        group: apache
        mode: '0664'
      when: not env_file.stat.exists
      become: yes
      tags:
      - variables

    - name: Add DATABASE_URL to .env.local
      lineinfile:
        path: "{{ shared_path }}/.env.local"
        regexp: '^DATABASE_URL='
        line: "DATABASE_URL=mysql://habitat:{{ random_password }}@localhost:3306/habitat"
        state: present
      become: yes
      tags:
      - variables

    - name: Check if the encryption key is already defined
      lineinfile:
        state: absent
        path: "{{ shared_path }}/.env.local"
        regexp: '^ENCRYPTION_KEY='
      check_mode: true
      changed_when: false
      register: existing_encryption_key
      tags:
      - variables

    - name: Generate an encryption key
      set_fact:
        encryption_key: "{{ lookup('community.general.random_string', length=32, min_lower=1, min_upper=1, min_numeric=1, min_special=1, override_special='-_=+!$()[]') }}"
      when: existing_encryption_key.found == 0
      tags:
      - variables

    - name: Add ENCRYPTION_KEY to .env.local
      lineinfile:
        path: "{{ shared_path }}/.env.local"
        regexp: '^ENCRYPTION_KEY='
        line: "ENCRYPTION_KEY={{ encryption_key }}"
        state: present
      become: yes
      when: existing_encryption_key.found == 0
      tags:
      - variables
      
    - name: Add APP_ENV to .env.local
      lineinfile:
        path: "{{ shared_path }}/.env.local"
        regexp: '^APP_ENV='
        line: "APP_ENV=prod"
        state: present
      become: yes
      tags:
      - variables

    - name: Create a cron job for certbot auto renewal
      cron:
        name: "Auto-renew letsencrypt certificate with certbot"
        minute: "0"
        hour: "1"
        day: "*"
        month: "*"
        weekday: "0"
        job: "certbot renew --post-hook 'systemctl reload httpd'"
        user: "root"
      become: yes
      tags:
      - cron

    - name: Create a cron job for Habitat data retention
      cron:
        name: "Run Symfony data retention command"
        minute: "0"
        hour: "0"
        job: "php /var/www/html/current/bin/console habitat:data-retention"
      tags:
      - cron

    - name: Check if public directory is empty
      find:
        paths: '/var/www/html/current/public'
      register: publicFilesFound

    - name: Remove current directory in preparation for it to be created as a symlink from Deployer
      file:
        path: /var/www/html/current
        state: absent
      when: publicFilesFound == 0
      become: yes

    - name: Create a swap file
      command: fallocate -l 2G /swapfile
      args:
        creates: /swapfile
      become: yes
      tags:
      - swap

    - name: Set the correct permissions for the swap file
      file:
        path: /swapfile
        mode: '0600'
      become: yes
      tags:
      - swap

    - name: Set up the swap area
      command: mkswap /swapfile
      args:
        creates: /swapfile.swap
      become: yes
      tags:
      - swap

    - name: Enable the swap file
      command: swapon /swapfile
      become: yes
      tags:
      - swap

    - name: Ensure swap is enabled on boot
      lineinfile:
        path: /etc/fstab
        line: '/swapfile none swap sw 0 0'
        state: present
      become: yes
      tags:
      - swap
